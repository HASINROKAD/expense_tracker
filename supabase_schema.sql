-- =====================================================
-- Supabase Database Schema for Flutter Expense Tracker
-- =====================================================

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =====================================================
-- User Profile Data Table
-- =====================================================
CREATE TABLE public.tbl_user_data (
  id UUID NOT NULL DEFAULT gen_random_uuid(),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  first_name TEXT,
  last_name TEXT,
  user_name VARCHAR(50) UNIQUE,
  phone_number VARCHAR(20),
  email TEXT,
  avatar_url TEXT,
  currency_preference VARCHAR(3) DEFAULT 'USD',
  theme_preference VARCHAR(10) DEFAULT 'system',
  language_preference VARCHAR(5) DEFAULT 'en',
  notification_enabled BOOLEAN DEFAULT true,
  backup_enabled BOOLEAN DEFAULT true,
  user_uuid UUID NOT NULL,
  CONSTRAINT tbl_user_data_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_user_data_user_uuid_fkey FOREIGN KEY (user_uuid) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT valid_currency CHECK (currency_preference IN ('USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'INR')),
  CONSTRAINT valid_theme CHECK (theme_preference IN ('light', 'dark', 'system')),
  CONSTRAINT valid_language CHECK (language_preference IN ('en', 'es', 'fr', 'de', 'it', 'pt', 'hi'))
) TABLESPACE pg_default;

-- =====================================================
-- Expense Categories Table
-- =====================================================
CREATE TABLE public.tbl_expense_categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  category_name TEXT NOT NULL,
  category_icon TEXT NOT NULL,
  category_color VARCHAR(7) NOT NULL DEFAULT '#FF6B6B',
  is_default BOOLEAN DEFAULT false,
  is_active BOOLEAN DEFAULT true,
  user_uuid UUID,
  CONSTRAINT tbl_expense_categories_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_expense_categories_user_uuid_fkey FOREIGN KEY (user_uuid) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT valid_color_format CHECK (category_color ~ '^#[0-9A-Fa-f]{6}$')
) TABLESPACE pg_default;

-- =====================================================
-- Income Categories Table
-- =====================================================
CREATE TABLE public.tbl_income_categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  category_name TEXT NOT NULL,
  category_icon TEXT NOT NULL,
  category_color VARCHAR(7) NOT NULL DEFAULT '#45B7D1',
  is_default BOOLEAN DEFAULT false,
  is_active BOOLEAN DEFAULT true,
  user_uuid UUID,
  CONSTRAINT tbl_income_categories_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_income_categories_user_uuid_fkey FOREIGN KEY (user_uuid) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT valid_color_format CHECK (category_color ~ '^#[0-9A-Fa-f]{6}$')
) TABLESPACE pg_default;

-- =====================================================
-- Expense Transactions Table
-- =====================================================
CREATE TABLE public.tbl_add_expense_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  expense_amount DECIMAL(12,2) NOT NULL CHECK (expense_amount > 0),
  description TEXT NOT NULL,
  expense_category TEXT NOT NULL,
  expense_payment_method TEXT NOT NULL,
  expense_payment_status TEXT NOT NULL DEFAULT 'completed',
  expense_date DATE NOT NULL DEFAULT CURRENT_DATE,
  receipt_url TEXT,
  notes TEXT,
  location TEXT,
  tags TEXT[],
  is_recurring BOOLEAN DEFAULT false,
  recurring_frequency TEXT,
  user_uuid UUID NOT NULL,
  CONSTRAINT tbl_add_expense_data_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_add_expense_data_user_uuid_fkey FOREIGN KEY (user_uuid) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT valid_payment_status CHECK (expense_payment_status IN ('completed', 'pending', 'failed', 'cancelled')),
  CONSTRAINT valid_payment_method CHECK (expense_payment_method IN ('cash', 'credit_card', 'debit_card', 'bank_transfer', 'digital_wallet', 'check', 'other')),
  CONSTRAINT valid_recurring_frequency CHECK (recurring_frequency IS NULL OR recurring_frequency IN ('daily', 'weekly', 'monthly', 'yearly'))
) TABLESPACE pg_default;

-- =====================================================
-- Income Transactions Table
-- =====================================================
CREATE TABLE public.tbl_add_income_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  income_amount DECIMAL(12,2) NOT NULL CHECK (income_amount > 0),
  description TEXT NOT NULL,
  income_category TEXT NOT NULL,
  income_payment_method TEXT NOT NULL,
  income_payment_status TEXT NOT NULL DEFAULT 'received',
  income_date DATE NOT NULL DEFAULT CURRENT_DATE,
  receipt_url TEXT,
  notes TEXT,
  location TEXT,
  tags TEXT[],
  is_recurring BOOLEAN DEFAULT false,
  recurring_frequency TEXT,
  user_uuid UUID NOT NULL,
  CONSTRAINT tbl_add_income_data_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_add_income_data_user_uuid_fkey FOREIGN KEY (user_uuid) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT valid_payment_status CHECK (income_payment_status IN ('received', 'pending', 'failed', 'cancelled')),
  CONSTRAINT valid_payment_method CHECK (income_payment_method IN ('cash', 'credit_card', 'debit_card', 'bank_transfer', 'digital_wallet', 'check', 'other')),
  CONSTRAINT valid_recurring_frequency CHECK (recurring_frequency IS NULL OR recurring_frequency IN ('daily', 'weekly', 'monthly', 'yearly'))
) TABLESPACE pg_default;

-- =====================================================
-- Budgets Table
-- =====================================================
CREATE TABLE public.tbl_budgets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  budget_name TEXT NOT NULL,
  budget_amount DECIMAL(12,2) NOT NULL CHECK (budget_amount > 0),
  spent_amount DECIMAL(12,2) DEFAULT 0 CHECK (spent_amount >= 0),
  budget_category TEXT NOT NULL,
  budget_period TEXT NOT NULL DEFAULT 'monthly',
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  is_active BOOLEAN DEFAULT true,
  alert_threshold DECIMAL(5,2) DEFAULT 80.00 CHECK (alert_threshold BETWEEN 0 AND 100),
  user_uuid UUID NOT NULL,
  CONSTRAINT tbl_budgets_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_budgets_user_uuid_fkey FOREIGN KEY (user_uuid) REFERENCES auth.users (id) ON DELETE CASCADE,
  CONSTRAINT valid_budget_period CHECK (budget_period IN ('weekly', 'monthly', 'quarterly', 'yearly')),
  CONSTRAINT valid_date_range CHECK (end_date > start_date)
) TABLESPACE pg_default;

-- =====================================================
-- Performance Indexes
-- =====================================================

-- User data indexes
CREATE INDEX idx_user_data_user_uuid ON public.tbl_user_data(user_uuid);
CREATE INDEX idx_user_data_user_name ON public.tbl_user_data(user_name);

-- Category indexes
CREATE INDEX idx_expense_categories_user_uuid ON public.tbl_expense_categories(user_uuid);
CREATE INDEX idx_expense_categories_active ON public.tbl_expense_categories(is_active);
CREATE INDEX idx_income_categories_user_uuid ON public.tbl_income_categories(user_uuid);
CREATE INDEX idx_income_categories_active ON public.tbl_income_categories(is_active);

-- Transaction indexes for better query performance
CREATE INDEX idx_expense_user_uuid ON public.tbl_add_expense_data(user_uuid);
CREATE INDEX idx_expense_date ON public.tbl_add_expense_data(expense_date);
CREATE INDEX idx_expense_category ON public.tbl_add_expense_data(expense_category);
CREATE INDEX idx_expense_amount ON public.tbl_add_expense_data(expense_amount);
CREATE INDEX idx_expense_date_user ON public.tbl_add_expense_data(expense_date, user_uuid);

CREATE INDEX idx_income_user_uuid ON public.tbl_add_income_data(user_uuid);
CREATE INDEX idx_income_date ON public.tbl_add_income_data(income_date);
CREATE INDEX idx_income_category ON public.tbl_add_income_data(income_category);
CREATE INDEX idx_income_amount ON public.tbl_add_income_data(income_amount);
CREATE INDEX idx_income_date_user ON public.tbl_add_income_data(income_date, user_uuid);

-- Budget indexes
CREATE INDEX idx_budgets_user_uuid ON public.tbl_budgets(user_uuid);
CREATE INDEX idx_budgets_active ON public.tbl_budgets(is_active);
CREATE INDEX idx_budgets_period ON public.tbl_budgets(start_date, end_date);

-- =====================================================
-- Updated At Triggers
-- =====================================================

-- Function to update the updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply triggers to all tables
CREATE TRIGGER update_tbl_user_data_updated_at BEFORE UPDATE ON public.tbl_user_data FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tbl_expense_categories_updated_at BEFORE UPDATE ON public.tbl_expense_categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tbl_income_categories_updated_at BEFORE UPDATE ON public.tbl_income_categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tbl_add_expense_data_updated_at BEFORE UPDATE ON public.tbl_add_expense_data FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tbl_add_income_data_updated_at BEFORE UPDATE ON public.tbl_add_income_data FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tbl_budgets_updated_at BEFORE UPDATE ON public.tbl_budgets FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- Row Level Security (RLS) Policies
-- =====================================================

-- Enable RLS on all tables
ALTER TABLE public.tbl_user_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tbl_expense_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tbl_income_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tbl_add_expense_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tbl_add_income_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tbl_budgets ENABLE ROW LEVEL SECURITY;

-- User data policies
CREATE POLICY "Users can view own profile" ON public.tbl_user_data FOR SELECT USING (auth.uid() = user_uuid);
CREATE POLICY "Users can update own profile" ON public.tbl_user_data FOR UPDATE USING (auth.uid() = user_uuid);
CREATE POLICY "Users can insert own profile" ON public.tbl_user_data FOR INSERT WITH CHECK (auth.uid() = user_uuid);

-- Expense categories policies
CREATE POLICY "Users can view own expense categories" ON public.tbl_expense_categories FOR SELECT USING (auth.uid() = user_uuid OR user_uuid IS NULL);
CREATE POLICY "Users can manage own expense categories" ON public.tbl_expense_categories FOR ALL USING (auth.uid() = user_uuid);

-- Income categories policies
CREATE POLICY "Users can view own income categories" ON public.tbl_income_categories FOR SELECT USING (auth.uid() = user_uuid OR user_uuid IS NULL);
CREATE POLICY "Users can manage own income categories" ON public.tbl_income_categories FOR ALL USING (auth.uid() = user_uuid);

-- Expense data policies
CREATE POLICY "Users can manage own expenses" ON public.tbl_add_expense_data FOR ALL USING (auth.uid() = user_uuid);

-- Income data policies
CREATE POLICY "Users can manage own income" ON public.tbl_add_income_data FOR ALL USING (auth.uid() = user_uuid);

-- Budget policies
CREATE POLICY "Users can manage own budgets" ON public.tbl_budgets FOR ALL USING (auth.uid() = user_uuid);

-- =====================================================
-- Default Categories Data
-- =====================================================

-- Insert default expense categories (available to all users)
INSERT INTO public.tbl_expense_categories (category_name, category_icon, category_color, is_default, user_uuid) VALUES
('Food & Dining', 'utensils', '#FF6B6B', true, NULL),
('Transportation', 'car', '#4ECDC4', true, NULL),
('Shopping', 'shopping-bag', '#45B7D1', true, NULL),
('Entertainment', 'film', '#96CEB4', true, NULL),
('Bills & Utilities', 'file-text', '#FFEAA7', true, NULL),
('Healthcare', 'heart', '#DDA0DD', true, NULL),
('Education', 'book', '#98D8C8', true, NULL),
('Travel', 'map-pin', '#F7DC6F', true, NULL),
('Personal Care', 'user', '#BB8FCE', true, NULL),
('Home & Garden', 'home', '#85C1E9', true, NULL),
('Insurance', 'shield', '#F8C471', true, NULL),
('Taxes', 'calculator', '#EC7063', true, NULL),
('Gifts & Donations', 'gift', '#58D68D', true, NULL),
('Business', 'briefcase', '#5DADE2', true, NULL),
('Other', 'more-horizontal', '#BDC3C7', true, NULL);

-- Insert default income categories (available to all users)
INSERT INTO public.tbl_income_categories (category_name, category_icon, category_color, is_default, user_uuid) VALUES
('Salary', 'briefcase', '#45B7D1', true, NULL),
('Freelance', 'edit', '#96CEB4', true, NULL),
('Business', 'trending-up', '#4ECDC4', true, NULL),
('Investments', 'bar-chart', '#FFEAA7', true, NULL),
('Rental Income', 'home', '#DDA0DD', true, NULL),
('Dividends', 'dollar-sign', '#98D8C8', true, NULL),
('Interest', 'percent', '#F7DC6F', true, NULL),
('Bonus', 'award', '#BB8FCE', true, NULL),
('Gifts', 'gift', '#85C1E9', true, NULL),
('Refunds', 'refresh-cw', '#F8C471', true, NULL),
('Side Hustle', 'zap', '#EC7063', true, NULL),
('Pension', 'clock', '#58D68D', true, NULL),
('Government Benefits', 'shield', '#5DADE2', true, NULL),
('Other', 'more-horizontal', '#BDC3C7', true, NULL);

-- =====================================================
-- Useful Views for Analytics
-- =====================================================

-- Monthly expense summary view
CREATE OR REPLACE VIEW v_monthly_expense_summary AS
SELECT
    user_uuid,
    DATE_TRUNC('month', expense_date) as month,
    expense_category,
    COUNT(*) as transaction_count,
    SUM(expense_amount) as total_amount,
    AVG(expense_amount) as average_amount
FROM public.tbl_add_expense_data
WHERE expense_payment_status = 'completed'
GROUP BY user_uuid, DATE_TRUNC('month', expense_date), expense_category
ORDER BY month DESC, total_amount DESC;

-- Monthly income summary view
CREATE OR REPLACE VIEW v_monthly_income_summary AS
SELECT
    user_uuid,
    DATE_TRUNC('month', income_date) as month,
    income_category,
    COUNT(*) as transaction_count,
    SUM(income_amount) as total_amount,
    AVG(income_amount) as average_amount
FROM public.tbl_add_income_data
WHERE income_payment_status = 'received'
GROUP BY user_uuid, DATE_TRUNC('month', income_date), income_category
ORDER BY month DESC, total_amount DESC;

-- User balance summary view
CREATE OR REPLACE VIEW v_user_balance_summary AS
SELECT
    u.user_uuid,
    u.first_name,
    u.last_name,
    COALESCE(i.total_income, 0) as total_income,
    COALESCE(e.total_expenses, 0) as total_expenses,
    COALESCE(i.total_income, 0) - COALESCE(e.total_expenses, 0) as net_balance,
    COALESCE(i.income_transactions, 0) as income_transactions,
    COALESCE(e.expense_transactions, 0) as expense_transactions
FROM public.tbl_user_data u
LEFT JOIN (
    SELECT
        user_uuid,
        SUM(income_amount) as total_income,
        COUNT(*) as income_transactions
    FROM public.tbl_add_income_data
    WHERE income_payment_status = 'received'
    GROUP BY user_uuid
) i ON u.user_uuid = i.user_uuid
LEFT JOIN (
    SELECT
        user_uuid,
        SUM(expense_amount) as total_expenses,
        COUNT(*) as expense_transactions
    FROM public.tbl_add_expense_data
    WHERE expense_payment_status = 'completed'
    GROUP BY user_uuid
) e ON u.user_uuid = e.user_uuid;

-- =====================================================
-- Functions for Common Operations
-- =====================================================

-- Function to get user's monthly spending by category
CREATE OR REPLACE FUNCTION get_monthly_spending_by_category(
    p_user_uuid UUID,
    p_year INTEGER DEFAULT EXTRACT(YEAR FROM CURRENT_DATE),
    p_month INTEGER DEFAULT EXTRACT(MONTH FROM CURRENT_DATE)
)
RETURNS TABLE (
    category TEXT,
    total_amount DECIMAL(12,2),
    transaction_count BIGINT,
    percentage DECIMAL(5,2)
) AS $$
DECLARE
    total_monthly_spending DECIMAL(12,2);
BEGIN
    -- Get total monthly spending
    SELECT COALESCE(SUM(expense_amount), 0) INTO total_monthly_spending
    FROM public.tbl_add_expense_data
    WHERE user_uuid = p_user_uuid
    AND EXTRACT(YEAR FROM expense_date) = p_year
    AND EXTRACT(MONTH FROM expense_date) = p_month
    AND expense_payment_status = 'completed';

    -- Return category breakdown
    RETURN QUERY
    SELECT
        e.expense_category,
        SUM(e.expense_amount) as total_amount,
        COUNT(*) as transaction_count,
        CASE
            WHEN total_monthly_spending > 0 THEN
                ROUND((SUM(e.expense_amount) / total_monthly_spending * 100), 2)
            ELSE 0
        END as percentage
    FROM public.tbl_add_expense_data e
    WHERE e.user_uuid = p_user_uuid
    AND EXTRACT(YEAR FROM e.expense_date) = p_year
    AND EXTRACT(MONTH FROM e.expense_date) = p_month
    AND e.expense_payment_status = 'completed'
    GROUP BY e.expense_category
    ORDER BY total_amount DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to update budget spent amount
CREATE OR REPLACE FUNCTION update_budget_spent_amount()
RETURNS TRIGGER AS $$
BEGIN
    -- Update budget spent amount when expense is added/updated/deleted
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        UPDATE public.tbl_budgets
        SET spent_amount = (
            SELECT COALESCE(SUM(expense_amount), 0)
            FROM public.tbl_add_expense_data
            WHERE user_uuid = NEW.user_uuid
            AND expense_category = budget_category
            AND expense_date BETWEEN start_date AND end_date
            AND expense_payment_status = 'completed'
        )
        WHERE user_uuid = NEW.user_uuid
        AND budget_category = NEW.expense_category
        AND NEW.expense_date BETWEEN start_date AND end_date
        AND is_active = true;

        RETURN NEW;
    END IF;

    IF TG_OP = 'DELETE' THEN
        UPDATE public.tbl_budgets
        SET spent_amount = (
            SELECT COALESCE(SUM(expense_amount), 0)
            FROM public.tbl_add_expense_data
            WHERE user_uuid = OLD.user_uuid
            AND expense_category = budget_category
            AND expense_date BETWEEN start_date AND end_date
            AND expense_payment_status = 'completed'
        )
        WHERE user_uuid = OLD.user_uuid
        AND budget_category = OLD.expense_category
        AND OLD.expense_date BETWEEN start_date AND end_date
        AND is_active = true;

        RETURN OLD;
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for budget updates
CREATE TRIGGER trigger_update_budget_spent
    AFTER INSERT OR UPDATE OR DELETE ON public.tbl_add_expense_data
    FOR EACH ROW EXECUTE FUNCTION update_budget_spent_amount();
